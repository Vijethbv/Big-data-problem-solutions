Relational Algebra Functions:

Relational algebra is a procedural query language, which takes instances of relations as input and yields instances of relations as output. It uses operators to perform queries. An operator can be either unary or binary. Some of operational which are done using mapreduce framework are selection, projection, join and union

Selection :  selects all those tuples in relation R for which holds


---------------------------------------------------------------------------------------------------------------------------
Working Code - modify the path to the input file
---------------------------------------------------------------------------------------------------------------------------

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

/**
 * Selects the row with the 2nd column value 2 */

public class Selection {
	
	public static class TokenizerMapper extends Mapper<Object, Text, Text, Text>{

		private Text word = new Text();

		public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
			String str[]= value.toString().split(",");
			System.out.println(value.toString());
			if(str[1].equals("2")) {
				word.set(value.toString());
				context.write(word, word);
			}
		}
	}

	public static class IntSumReducer extends Reducer<Text,Text,Text,Text> {

		public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {

			for (Text val : values) {
				context.write(key, new Text(""));
			}
		}
	}


	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "word count");
		job.setJarByClass(Selection.class);
		job.setMapperClass(TokenizerMapper.class);
		job.setCombinerClass(IntSumReducer.class);
		job.setReducerClass(IntSumReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(job, new Path("datafiles/select/test.csv"));
		FileOutputFormat.setOutputPath(job, new Path("datafiles/select/output"));
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}
}
